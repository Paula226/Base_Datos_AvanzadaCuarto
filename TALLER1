
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author Paula Lopez
 */
public class taller1 {

    public static void merge(int[] A, int p, int q, int r) {
        int n1 = q - p + 1; // Longitud de A[p : q]
        int n2 = r - q;     // Longitud de A[q + 1 : r]

        // Crear arreglos temporales L y R
        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copiar A[p : q] en L
        for (int i = 0; i < n1; i++) {
            L[i] = A[p + i];
        }

        // Copiar A[q + 1 : r] en R
        for (int j = 0; j < n2; j++) {
            R[j] = A[q + 1 + j];
        }

        int i = 0; // Índice para recorrer L
        int j = 0; // Índice para recorrer R
        int k = p; // Índice para llenar en A

        // Mezclar L y R nuevamente en A[p : r]
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                A[k] = L[i];
                i++;
            } else {
                A[k] = R[j];
                j++;
            }
            k++;
        }

        // Copiar los elementos restantes de L, si hay alguno
        while (i < n1) {
            A[k] = L[i];
            i++;
            k++;
        }

        // Copiar los elementos restantes de R, si hay alguno
        while (j < n2) {
            A[k] = R[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        int[] array = {12, 11, 13, 5, 6, 7};
        merge(array, 0, 2, 5); // Ejemplo de mezcla
        for (int num : array) {
            System.out.print(num + " ");
        }
    }
}
**RESULTADO 🫠



